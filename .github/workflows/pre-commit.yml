# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: pre-commit

on:
  push:
  pull_request:

jobs:
  pre-commit:
    name: Detecting code style issues
    runs-on: ubuntu-latest
    steps:
    - name: "Check out repository"
      uses: actions/checkout@v3
      with:
        # Unfortunately we need the whole history and can't use a shallow clone
        # because the Appstream Metadata hook parses the history to find the
        # latest changelog modification date. Otherwise, `fetch-depth: 2` would
        # suffice.
        fetch-depth: 0

    - name: "Set up Python"
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install clang-format
      run: sudo apt-get update && sudo apt-get install -y --no-install-recommends clang-format-10

    # Workaround the fact that ubuntu doesn't ship a new enough system
    # distlib version
    - name: "Forcefully install newer distlib"
      run: "python -m pip install --user distlib==0.3.5"

    - name: "Detect code style issues (push)"
      uses: pre-commit/action@v3.0.0
      if: github.event_name == 'push'
      # There are too many files in the repo that have formatting issues. We'll
      # disable these checks for now when pushing directly (but still run these
      # on Pull Requests!).
      env:
        SKIP: end-of-file-fixer,trailing-whitespace,clang-format,eslint,no-commit-to-branch

    - name: "Detect code style issues (pull_request)"
      uses: pre-commit/action@v3.0.0
      if: github.event_name == 'pull_request'
      env:
        SKIP: no-commit-to-branch
      with:
        # HEAD is the not yet integrated PR merge commit +refs/pull/xxxx/merge
        # HEAD^1 is the PR target branch and HEAD^2 is the HEAD of the source branch
        extra_args: --from-ref HEAD^1 --to-ref HEAD

    - name: "Generate patch file"
      if: failure()
      run: |
        git diff-index -p HEAD > "${PATCH_FILE}"
        [ -s "${PATCH_FILE}" ] && echo "UPLOAD_PATCH_FILE=${PATCH_FILE}" >> "${GITHUB_ENV}"
      env:
        PATCH_FILE: pre-commit.patch

    - name: "Upload patch artifact"
      if: failure() && env.UPLOAD_PATCH_FILE != null
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.UPLOAD_PATCH_FILE }}
        path: ${{ env.UPLOAD_PATCH_FILE }}

    - name: "Install appstreamcli"
      run: sudo apt-get update && sudo apt-get install -y --no-install-recommends appstream

    # AppStream metadata has been generated/updated by a pre-commit hook
    - name: "Validate AppStream metadata"
      run: appstreamcli validate res/linux/org.mixxx.Mixxx.metainfo.xml
